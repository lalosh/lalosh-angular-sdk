import { AutocompleteFeedbackURLOptions, AutocompleteURLOptions } from "../types/url";
import { LablebSDKContext } from "./index";
import { extractIdPropertyFromURL } from "../helpers";
import { AutocompleteResponse } from "../types/sdk/autocomplete";




/**
 * Make autocomplete request to Lableb Cloud API
 * 
 * @param {object} options - autocomplete options
 * @param {string} options.query - query string
 * @param {string} options.itemURLSchema - url schema help the user forming the feedback url for future use 
 * (you can provided any url string that has the string`{id}` in it so the feedback url is automatically formed for you to use when response gets back)
 * 
 * @returns {Promise} - autocomplete response
 */
export function autocomplete(

    this: LablebSDKContext,

    options: Omit<AutocompleteURLOptions, "sessionId">

): Promise<AutocompleteResponse> {

    const { itemURLSchema, ...urlOptions } = options;

    return this.httpClient
        .get({
            url: this.urlBuilder.autocompleteURL({
                ...urlOptions,
                sessionId: this.sessionId,
            })
        })
        .then(appendAutocompleteFeedbackURL.bind(this, options));

}






/**
 * Append the feed back url in response objects
 * 
 * @param {object} httpResponse
 * @param {object} options 
 * @param {string} options.query - query string
 * @param {string} options.itemURLSchema - url schema help the user forming the feedback url for future use 
 * (you can provided any url string that has the string`{id}` in it so the feedback url is automatically formed for you to use when response gets back)
 * 
 * @returns {object}
 */
function appendAutocompleteFeedbackURL(

    this: LablebSDKContext,

    options: Omit<AutocompleteURLOptions, "sessionId">,

    httpResponse: any,

): AutocompleteResponse {

    try {

        const [idPropertyWithBraces, idPropertyName] = extractIdPropertyFromURL(options.itemURLSchema);

        const results: any[] = httpResponse.results;

        const newResults = results.map((result: any, index: number) => {

            const feedBackURLOptions: AutocompleteFeedbackURLOptions = {
                url: idPropertyName ? options?.itemURLSchema?.replace(idPropertyWithBraces, result[idPropertyName]) : '',
                itemId: result.id,
                itemOrder: index,
                query: options.query,
                userCountry: options.userCountry,
                userId: options.userId,
                userIp: options.userIp,
            }

            const feedbackUrl = this.urlBuilder.autocompleteFeedbackURL(feedBackURLOptions);

            return ({
                ...result,
                feedbackUrl
            })
        });

        return Object.assign({}, httpResponse, {
            results: newResults
        });

    } catch (error) {
        return httpResponse;
    }
}