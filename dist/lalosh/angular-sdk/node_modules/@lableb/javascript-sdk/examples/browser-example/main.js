


const options = {
    SDK_OPTIONS_COLLECTION_NAME: '<COLLECTION_NAME>',
    SDK_OPTIONS_PROJECT_NAME: '<PROJECT_NAME>',
    SDK_OPTIONS_SEARCH_TOKEN: '<SEARCH_TOKEN>',
    SDK_OPTIONS_INDEX_TOKEN: '<INDEX_TOKEN>',
    SDK_OPTIONS_AUTO_COMPLETE_HANDLER: '<SEARCH_TOKEN>',
    SDK_OPTIONS_RECOMMEND_HANDLER: '<RECOMMEND_HANDLER>',
    SDK_OPTIONS_SEARCH_HANDLER: '<SEARCH_HANDLER>',
}

/**
 * initialize the sdk options and get a ready to request client
 */
const client = window.LablebSDK.init({
    collectionName: options.SDK_OPTIONS_COLLECTION_NAME || '',
    projectName: options.SDK_OPTIONS_PROJECT_NAME || '',
    autoCompleteHandler: options.SDK_OPTIONS_AUTO_COMPLETE_HANDLER || '',
    indexToken: options.SDK_OPTIONS_INDEX_TOKEN || '',
    recommendHandler: options.SDK_OPTIONS_RECOMMEND_HANDLER || '',
    searchHandler: options.SDK_OPTIONS_SEARCH_HANDLER || '',
    searchToken: options.SDK_OPTIONS_SEARCH_TOKEN || '',
});





async function searchExample() {

    let searchResponse = await client.search({
        query: 'time',
        itemURLSchema: 'https://www.my-website.com/all-tasks/all-items/{id}'
    });

    console.log('search Response: ', searchResponse);

    /**
     * making feed back request can be done in two ways
     * 1- use sdk to make the feedback request
     * 2- use your own http client to make the request
     */

    if (searchResponse.results && searchResponse.results.length) {
        // 1- use sdk
        let feedBackResponse = await client.searchFeedbackFromURL(searchResponse.results[0].feedbackUrl);
        console.log('feedBackResponse Response:', feedBackResponse);

        // 2- use your own http client
        let custom_feedBackResponse = await fetch(searchResponse.results[0].feedbackUrl).then(res => res.json());
        console.log('custom feedBackResponse Response:', custom_feedBackResponse);
    }
}




async function autocompleteExample() {

    let autoCompleteResponse = await client.autocomplete({
        query: 'time',

    });

    console.log('autocomplete Response: ', autoCompleteResponse.data);


    /**
     * making feed back request can be done in two ways
     * 1- use sdk to make the feedback request
     * 2- use your own http client to make the request
     */

    if (autoCompleteResponse.results && autoCompleteResponse.results.length) {
        // 1- use the sdk
        let autocompleteFeedBackResponse = await client.autocompleteFeedbackFromURL(autoCompleteResponse.results[0].feedbackUrl);
        console.log('autocomplete Response: ', autocompleteFeedBackResponse);

        // 2- use your own http client
        let custom_autocompleteFeedBackResponse = await fetch(autoCompleteResponse.results[0].feedbackUrl).then(res => res.json());
        console.log('custom autocomplete Response: ', custom_autocompleteFeedBackResponse);
    }
}





async function recommendExample() {

    let recommendResponse = await client.recommend({
        id: 2,
        itemURLSchema: 'https://www.my-website.com/all-tasks/all-items/{id}',
        title: 'Update building process time',
        userId: 22,
        userIp: '222.222.111.222',
        userCountry: 'AF'
    });


    console.log('recommend Response: ', recommendResponse.data);

    /**
     * making feed back request can be done in two ways
     * 1- use sdk to make the feedback request
     * 2- use your own http client to make the request
     */

    if (recommendResponse.results && recommendResponse.results.length) {
        // 1- use sdk
        let feedBackResponse = await client.recommendFeedback(recommendResponse.results[0].feedbackUrl);
        console.log('feedback recommend Response: ', feedBackResponse);

        // 2- use your own
        let custom_feedBackResponse = await fetch(recommendResponse.results[0].feedbackUrl).then(res => res.json());
        console.log('custom feedback recommend Response: ', custom_feedBackResponse);
    }
}






/**
 * running all features...
 */
(async function TestWithNodeJS() {


    await searchExample();
    await autocompleteExample();
    await recommendExample();

})()