import { customIdentity } from "../helpers";
import { camelCaseToSnackCase } from "../helpers/camel-case";
import { pickBy } from "../helpers/pick-by";
import { AutocompleteURLOptions, URLBuilderExecutionContext } from "../types/url";
import { buildURLParams } from "./url.utils";



/**
 * Generate Autocomplete URL
 * 
 * take autocomplete request's options and generate the url for the `autocomplete` request
 * 
 * @param {object} autocompleteURLOptions options object
 * @param {string} autocompleteURLOptions.query - autocomplete query string
 * @param {string} autocompleteURLOptions.itemURLSchema - url schema help the user forming the feedback url for future use 
 * (you can provided any url string that has the string`{id}` in it so the feedback url is automatically formed for you to use when response gets back)
 * @param {string} autocompleteURLOptions.sessionId - unique session id per user
 * @param {number} autocompleteURLOptions.userId - unique user id
 * @param {string} autocompleteURLOptions.userIp - user ip address
 * @param {string} autocompleteURLOptions.userCountry - user country iso 3166 code
 * 
 * @returns {string} - url used for the autocomplete request
 */
export function autocompleteURL(

    this: URLBuilderExecutionContext,

    autocompleteURLOptions: AutocompleteURLOptions = { query: '' }

) {

    /**
     * make sure we have the wanted properties
     */
    this.checkExistence({
        functionName: 'autocompleteURL',
        properties: ["projectName", "collectionName", "searchToken", "autoCompleteHandler"]
    });


    /** extract properties */
    const { baseURL, projectName, collectionName, searchToken, autoCompleteHandler } = this.options;
    const { query, ...restOptions } = autocompleteURLOptions;


    /**
     * convert to snack case and remove undefined values
     */
    let urlParams = buildURLParams(
        pickBy(
            {
                ...camelCaseToSnackCase({ q: query, ...restOptions }),
                token: searchToken,
            },
            customIdentity
        )
    );

    urlParams = urlParams ? `?${urlParams}` : ``;


    return `${baseURL}/projects/${projectName}/collections/${collectionName}/autocomplete/${autoCompleteHandler}${urlParams}`;
}
