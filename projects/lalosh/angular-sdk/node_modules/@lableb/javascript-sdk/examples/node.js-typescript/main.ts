import * as LablebSDK from '@lableb/javascript-sdk';

// in case you want to use your own http client
// import axios from 'axios';



/**
 * initialize the sdk options and get a ready to request client
 */
const client = LablebSDK.init({
    collectionName: process.env.SDK_OPTIONS_COLLECTION_NAME || '',
    projectName: process.env.SDK_OPTIONS_PROJECT_NAME || '',
    autoCompleteHandler: process.env.SDK_OPTIONS_AUTO_COMPLETE_HANDLER || '',
    indexToken: process.env.SDK_OPTIONS_INDEX_TOKEN || '',
    recommendHandler: process.env.SDK_OPTIONS_RECOMMEND_HANDLER || '',
    searchHandler: process.env.SDK_OPTIONS_SEARCH_HANDLER || '',
    searchToken: process.env.SDK_OPTIONS_SEARCH_TOKEN || '',
});





async function indexExample() {
    /**
     * indexing documents
     */
    const indexResponse = await client.indexDocuments([
        {
            id: 5,
            title: "Finish interior design project with time enhancement",
            tags: ["research", "design"],
            url: "https://www.my-website.com/all-tasks/finish-interior-design-project",
        },
        {
            id: 6,
            title: "Update building process time",
            tags: ["performance"],
            url: "https://www.my-website.com/all-tasks/build-process-time",
        },
    ]);

    console.log('index Response: ', indexResponse);
}



async function searchExample() {

    let searchResponse = await client.search({
        query: 'time',
        itemURLSchema: 'https://www.my-website.com/all-tasks/all-items/{id}'
    });

    console.log('search Response: ', searchResponse);

    /**
     * making feed back request can be done in two ways
     * 1- use sdk to make the feedback request
     * 2- use your own http client to make the request
     */

    // 1- use sdk
    let feedBackResponse = await client.searchFeedbackFromURL(searchResponse.results[0].feedbackUrl);
    console.log('feedBackResponse Response:', feedBackResponse);

    // 2- use your own http client
    // let custom_feedBackResponse = await axios.get(searchResponse.results[0].feedbackUrl);
    // console.log('custom feedBackResponse Response:', custom_feedBackResponse);
}




async function autocompleteExample() {

    let autoCompleteResponse = await client.autocomplete({
        query: 'time',

    });

    console.log('autocomplete Response: ', autoCompleteResponse);


    /**
     * making feed back request can be done in two ways
     * 1- use sdk to make the feedback request
     * 2- use your own http client to make the request
     */

    // 1- use the sdk
    let autocompleteFeedBackResponse = await client.autocompleteFeedbackFromURL(autoCompleteResponse.results[0].feedbackUrl);
    console.log('autocomplete Response: ', autocompleteFeedBackResponse);

    // 2- use your own http client
    // let custom_autocompleteFeedBackResponse = await axios.get(autoCompleteResponse.results[0].feedbackUrl);
    // console.log('custom autocomplete Response: ', custom_autocompleteFeedBackResponse);

}





async function recommendExample() {

    let recommendResponse = await client.recommend({
        id: 2,
        itemURLSchema: 'https://www.my-website.com/all-tasks/all-items/{id}',
        title: 'Update building process time',
        userId: 22,
        userIp: '222.222.111.222',
        userCountry: 'AF'
    });


    console.log('recommend Response: ', recommendResponse);

    /**
     * making feed back request can be done in two ways
     * 1- use sdk to make the feedback request
     * 2- use your own http client to make the request
     */

    // 1- use sdk
    let feedBackResponse = await client.recommendFeedbackFromURL(recommendResponse.results[0].feedbackUrl);
    console.log('feedback recommend Response: ', feedBackResponse);

    // 2- use your own
    // let custom_feedBackResponse = await axios.get(recommendResponse.results[0].feedbackUrl);
    // console.log('custom feedback recommend Response: ', custom_feedBackResponse);
}




async function deleteExample() {

    let deleteResponse = await client.delete({ documentId: 1 });
    console.log('delete Response: ', deleteResponse);
}



/**
 * running all features...
 */
(async function TestWithNodeJS() {


    await indexExample();
    await searchExample();
    await autocompleteExample();
    await recommendExample();
    await deleteExample();

})()