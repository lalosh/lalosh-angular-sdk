import { LablebSDKOptions } from '../types/sdk/options';
import { URLBuilder } from '../url';
import { autocomplete } from './autocomplete';
import { deleteDocument } from './delete';
import { indexDocuments } from './indexing';
import { recommend } from './recommend';
import { search } from './search';
import { HttpClient } from '../http'
import { searchFeedback, searchFeedbackFromURL } from './search-feedback';
import { autocompleteFeedback, autocompleteFeedbackFromURL } from './autocomplete-feedback';
import { recommendFeedback, recommendFeedbackFromURL } from './recommend-feedback';
import { generateSessionId } from './sessions-generator';
import { isBrowser } from '../helpers';




export interface LablebSDKContext {
    /**
     * Http client
     */
    httpClient: ReturnType<typeof HttpClient>,
    urlBuilder: ReturnType<typeof URLBuilder>,
    sdkOptions: LablebSDKOptions,
    sessionId?: string,
}




/** set handlers default */
const DEFAULT_SDK_OPTION: LablebSDKOptions = {
    projectName: '',
    collectionName: 'posts',
    searchHandler: 'default',
    autoCompleteHandler: 'suggest',
    recommendHandler: 'recommend',
}





/**
 * Lableb SDK Module
 * 
 * SDK offer you search, autocomplete, and recommend to use in browser 
 * and additional indexing & delete functions to use in node.js
 */
export function LablebSDK(sdkOptions: LablebSDKOptions = DEFAULT_SDK_OPTION) {

    let httpClient = HttpClient();
    let urlBuilder = URLBuilder({
        baseURL: process.env.LABLEB_API_BASE_URL || '',
        ...sdkOptions,
    });



    if (isBrowser() && (sdkOptions?.indexToken?.length ?? '') > 0) {
        throw new Error('You cannot use index token in browser');
    }


    const context: LablebSDKContext = {
        httpClient,
        urlBuilder,
        sdkOptions,
        /**
         * either use passed down function to generate the session id
         * or use sdk own generate session id function at init phase
         */
        sessionId:
            (
                sdkOptions &&
                sdkOptions.generateSessionId &&
                typeof sdkOptions.generateSessionId == 'function'
            )
                ?
                sdkOptions.generateSessionId()
                :
                generateSessionId()

    }





    const API = {


        /** Send Search queries at Lableb Cloud */
        search: search.bind(context) as (...P: Parameters<typeof search>) => ReturnType<typeof search>,

        /** Send Search feedback to Lableb Cloud */
        searchFeedback: searchFeedback.bind(context) as (...P: Parameters<typeof searchFeedback>) => ReturnType<typeof searchFeedback>,

        /** Directly send search feedback from url */
        searchFeedbackFromURL: searchFeedbackFromURL.bind(context) as (...P: Parameters<typeof searchFeedbackFromURL>) => ReturnType<typeof searchFeedbackFromURL>,





        /** Make autocomplete request to Lableb Cloud API */
        autocomplete: autocomplete.bind(context) as (...P: Parameters<typeof autocomplete>) => ReturnType<typeof autocomplete>,

        /** Send autocomplete feedback to Lableb Cloud API */
        autocompleteFeedback: autocompleteFeedback.bind(context) as (...P: Parameters<typeof autocompleteFeedback>) => ReturnType<typeof autocompleteFeedback>,

        /** Send autocomplete feedback to Lableb Cloud API from a given URL  */
        autocompleteFeedbackFromURL: autocompleteFeedbackFromURL.bind(context) as (...P: Parameters<typeof autocompleteFeedbackFromURL>) => ReturnType<typeof autocompleteFeedbackFromURL>,




        /** Request Recommendation for some document from Lableb Cloud API */
        recommend: recommend.bind(context) as (...P: Parameters<typeof recommend>) => ReturnType<typeof recommend>,

        /** Send Recommend Feedback to Lableb */
        recommendFeedback: recommendFeedback.bind(context) as (...P: Parameters<typeof recommendFeedback>) => ReturnType<typeof recommendFeedback>,

        /** Send Recommend Feedback to Lableb from a given url */
        recommendFeedbackFromURL: recommendFeedbackFromURL.bind(context) as (...P: Parameters<typeof recommendFeedbackFromURL>) => ReturnType<typeof recommendFeedbackFromURL>,





        /**
         * Index documents at Lableb Cloud
         * pass array of objects to index(or update) them immediately 
         */
        indexDocuments: process.env.BUILD_TARGET == 'BROWSER'
            ?
            function preventRunning(this: any) {
                throw new Error('You cannot use index function in browser');
            }
            : indexDocuments.bind(context) as (...P: Parameters<typeof indexDocuments>) => ReturnType<typeof indexDocuments>,





        /**
         * Delete document at Lableb Cloud by id
         */
        delete:
            process.env.BUILD_TARGET == 'BROWSER'
                ?
                function preventRunning(this: any) {
                    throw new Error('You cannot use delete function in browser');
                }
                : deleteDocument.bind(context) as (...P: Parameters<typeof deleteDocument>) => ReturnType<typeof deleteDocument>,

    }


    return API;
}
