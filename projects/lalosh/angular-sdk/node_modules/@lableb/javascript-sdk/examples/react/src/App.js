import * as LablebSDK from '@lableb/javascript-sdk';
import { useEffect, useState } from 'react';


const client = LablebSDK.init({
  collectionName: process.env.REACT_APP_SDK_OPTIONS_COLLECTION_NAME || '',
  projectName: process.env.REACT_APP_SDK_OPTIONS_PROJECT_NAME || '',
  autoCompleteHandler: process.env.REACT_APP_SDK_OPTIONS_AUTO_COMPLETE_HANDLER || '',
  indexToken: process.env.REACT_APP_SDK_OPTIONS_INDEX_TOKEN || '',
  recommendHandler: process.env.REACT_APP_SDK_OPTIONS_RECOMMEND_HANDLER || '',
  searchHandler: process.env.REACT_APP_SDK_OPTIONS_SEARCH_HANDLER || '',
  searchToken: process.env.REACT_APP_SDK_OPTIONS_SEARCH_TOKEN || '',
});





function App() {

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [autocomplete, setAutocomplete] = useState('');
  const [autocompleteResults, setAutocompleteResults] = useState([]);
  const [recommendResults, setRecommendResults] = useState([]);


  async function searchAtLableb() {

    let response = await client.search({
      query: search
    });

    setSearchResults(response.results);
  }


  async function autocompleteAtLableb() {

    let response = await client.autocomplete({
      query: autocomplete
    });

    setAutocompleteResults(response.results);
  }

  useEffect(() => {
    autocompleteAtLableb()
  }, [autocomplete]);



  async function recommendLableb(result) {
    let response = await client.recommend({ id: result.id });
    setRecommendResults(response.results);
  }


  async function searchFeedback(result) {
    await client.searchFeedbackFromURL(result.feedbackUrl);
  }


  async function autocompleteFeedback(result) {
    await client.autocompleteFeedbackFromURL(result.feedbackUrl);
  }


  async function recommendFeedback(result) {
    await client.recommendFeedbackFromURL(result.feedbackUrl);
  }



  return (
    <div>

      <h2>{'Test Lableb SDK in browser'}</h2>

      <div className="example-div">
        <p>{'Simple search example'}</p>
        <div>
          <input
            type="text"
            placeholder="search..."
            value={search}
            onChange={(event) => setSearch(event.target.value)}
          />
          <button onClick={searchAtLableb}>{'Search'}</button>
        </div>
        <div>
          <p> {'Search Results:'}</p>
          <ul id="search-results">
            {
              searchResults.map(result => <li key={String(result.id)}>
                <span onClick={() => searchFeedback(result)}>{result.title}</span>
                <button onClick={() => recommendLableb(result)}>{'recommend'}</button>
              </li>)
            }
          </ul>
        </div>
      </div>

      <hr />

      <div className="example-div">
        <p>{'Simple autocomplete example'}</p>
        <div>
          <input
            type="text"
            placeholder="autocomplete..."
            value={autocomplete}
            onChange={(event) => setAutocomplete(event.target.value)}
          />
        </div>
        <div>
          <p> {'Autocomplete Results:'}</p>
          <ul id="autocomplete-results">
            {
              autocompleteResults.map(result => <li key={String(result.id)}>
                <span onClick={() => autocompleteFeedback(result)}>{result.phrase}</span>
                <button onClick={() => recommendLableb(result)}>{'recommend'}</button>
              </li>)
            }
          </ul>
        </div>
      </div>


      <hr />


      <div className="example-div">
        <div>
          <p>{'Recommendation Results'}</p>
          <ul id="recommend-results">
            {
              recommendResults.map(result => <li key={String(result.id)}>
                <span onClick={() => recommendFeedback(result)}>{result.title}</span>
              </li>)
            }
          </ul>
        </div>
      </div>


    </div>
  );
}

export default App;
