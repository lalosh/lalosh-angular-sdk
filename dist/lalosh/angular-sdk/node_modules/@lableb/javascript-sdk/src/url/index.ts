import { URLBuilderOptions } from '../types/url';
import { searchURL } from './search';
import { indexDocumentURL, updateDocumentURL } from './indexing';
import { autocompleteURL } from './autocomplete';
import { recommendURL } from './recommend';
import { deleteDocumentURL } from './delete';
import { checkExistence } from './url.utils';
import { searchFeedbackURL } from './search-feedback';
import { autocompleteFeedbackURL } from './autocomplete-feedback';
import { recommendFeedbackURL } from './recommend-feedback';





/**
 * URLBuilder Module used to generate URLs of all requests used inside the SDK
 * 
 * @param {object} options 
 * @param {string} options.baseURL - base url link
 * @param {string} options.projectName - project name to be used in url builder
 * @param {string} options.collectionName - collection name to be used in url 
 * @param {string} options.searchHandler - search handler name
 * @param {string} options.autoCompleteHandler - auto complete handler name
 * @param {string} options.recommendHandler - recommendation handler name
 * @param {string} options.searchToken - search token string
 * @param {string} options.indexToken - index token string
 * 
 * @returns {URLBuilderAPI}
 */
export function URLBuilder(options: URLBuilderOptions) {


    /**
     * binding context used for other functions inside this module
     */
    const context = {
        options,
        checkExistence,

        indexDocumentURL,
        updateDocumentURL,
        searchURL,
        searchFeedbackURL,
        autocompleteURL,
        autocompleteFeedbackURL,
        feedbackURL: recommendURL,
        recommendFeedbackURL,
        deleteDocumentURL,
    }


    /**
     * API exposed to function user
     */
    const API = {

        /**
         * @function indexDocumentURL
         * return index documents request's url
         */
        indexDocumentURL: indexDocumentURL.bind(context) as (...p: Parameters<typeof indexDocumentURL>) => ReturnType<typeof indexDocumentURL>,



        /**
         * @function updateDocumentURL
         * return update documents request's url
         */
        updateDocumentURL: updateDocumentURL.bind(context) as (...p: Parameters<typeof updateDocumentURL>) => ReturnType<typeof updateDocumentURL>,



        /**
         * @function searchURL
         * return search for documents request's url
         */
        searchURL: searchURL.bind(context) as (...p: Parameters<typeof searchURL>) => ReturnType<typeof searchURL>,



        /**
         * @function searchFeedbackURL
         * return search feedback documents request's url
         */
        searchFeedbackURL: searchFeedbackURL.bind(context) as (...p: Parameters<typeof searchFeedbackURL>) => ReturnType<typeof searchFeedbackURL>,


        /**
         * @function autocompleteURL
         * return autocomplete request's url
         */
        autocompleteURL: autocompleteURL.bind(context) as (...p: Parameters<typeof autocompleteURL>) => ReturnType<typeof autocompleteURL>,



        /**
         * @function autocompleteFeedbackURL
         * return autocomplete feedback request's url
         */
        autocompleteFeedbackURL: autocompleteFeedbackURL.bind(context) as (...p: Parameters<typeof autocompleteFeedbackURL>) => ReturnType<typeof autocompleteFeedbackURL>,


        /**
         * @function recommendURL
         * return recommend request's url
         */
        recommendURL: recommendURL.bind(context) as (...p: Parameters<typeof recommendURL>) => ReturnType<typeof recommendURL>,



        /**
         * @function recommendFeedbackURL
         * return recommend feedback request's url
         */
        recommendFeedbackURL: recommendFeedbackURL.bind(context) as (...p: Parameters<typeof recommendFeedbackURL>) => ReturnType<typeof recommendFeedbackURL>,



        /**
         * @function deleteDocumentURL
         * return delete documents request's url
         */
        deleteDocumentURL: deleteDocumentURL.bind(context) as (...p: Parameters<typeof deleteDocumentURL>) => ReturnType<typeof deleteDocumentURL>
    }

    return API;
}

