import { Component, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import * as LablebSDK from '@lableb/javascript-sdk';
import { environment } from 'src/environments/environment';
import { debounce, debounceTime, tap } from 'rxjs/operators'

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {

  autocompleteInput = new FormControl('');
  searchInput: string = '';
  client: ReturnType<typeof LablebSDK.init>;
  searchResults: any[] = [];
  autocompleteResults: any[] = [];
  recommendationResults: any[] = [];

  constructor() {

    /**
     * initialize the sdk options and get a ready to request client
     */
    this.client = LablebSDK.init({
      collectionName: environment.SDK_OPTIONS_COLLECTION_NAME || '',
      projectName: environment.SDK_OPTIONS_PROJECT_NAME || '',
      autoCompleteHandler: environment.SDK_OPTIONS_AUTO_COMPLETE_HANDLER || '',
      indexToken: environment.SDK_OPTIONS_INDEX_TOKEN || '',
      recommendHandler: environment.SDK_OPTIONS_RECOMMEND_HANDLER || '',
      searchHandler: environment.SDK_OPTIONS_SEARCH_HANDLER || '',
      searchToken: environment.SDK_OPTIONS_SEARCH_TOKEN || '',
    });

  }

  async searchAtLableb($event: any) {

    this.recommendationResults = [];

    let response: any = await this.client.search({
      query: this.searchInput
    });

    this.searchResults = response?.results;
  }



  ngOnInit() {


    this.autocompleteInput.valueChanges
      .pipe(
        tap(() => {
          this.recommendationResults = [];
        }),
        debounceTime(1000)
      )
      .subscribe(async (autoCompleteValue) => {

        let response: any = await this.client.autocomplete({
          query: autoCompleteValue
        });

        this.autocompleteResults = response?.results;
      });
  }



  async recommend(documentId: number) {

    let response: any = await this.client.recommend({
      id: documentId,
    });

    this.recommendationResults = response.results;

  }



  async searchFeedback(item: any) {
    await this.client.searchFeedbackFromURL(item.feedbackUrl);
  }

  async autocompleteFeedback(item: any) {
    await this.client.autocompleteFeedbackFromURL(item.feedbackUrl)
  }

  async recommendFeedback(item: any) {
    await this.client.recommendFeedbackFromURL(item.feedbackUrl);
  }
}
