import { SearchFeedbackURLOptions, SearchURLOptions } from "../types/url";
import { LablebSDKContext } from "./index";
import { extractIdPropertyFromURL } from "../helpers";
import { SearchResponse } from "../types/sdk/search";


/**
 * Send Search queries at Lableb Cloud
 * 
 * @param {object} options 
 * @param {string} options.query - query used in search
 * @param {number} options.skip - skipped documents
 * @param {number} options.limit - max limit of returned documents
 * @param {string} options.sessionId - unique session id per user
 * @param {number} options.userId - unique user id
 * @param {string} options.userIp - user ip address
 * @param {string} options.userCountry - user country iso 3166 code
 * 
 * @returns {Promise} - search response
 */
export function search(

    this: LablebSDKContext,

    options: Omit<SearchURLOptions, "sessionId"> = { query: '' }

): Promise<SearchResponse> {

    const { itemURLSchema, ...urlOptions } = options;


    return this.httpClient
        .get({
            url: this.urlBuilder.searchURL({
                ...urlOptions,
                sessionId: this.sessionId,
            })
        })
        .then(appendFeedbackURL.bind(this, options));
}





/**
 * 
 * @param {object} httpResponse 
 * 
 * @param {object} options 
 * @param {string} options.query - query used in search
 * @param {number} options.skip - skipped documents
 * @param {number} options.limit - max limit of returned documents
 * @param {string} options.sessionId - unique session id per user
 * @param {number} options.userId - unique user id
 * @param {string} options.userIp - user ip address
 * @param {string} options.userCountry - user country iso 3166 code
 * 
 */
function appendFeedbackURL(

    this: LablebSDKContext,

    options: Omit<SearchURLOptions, "sessionId">,

    httpResponse: any,

): SearchResponse {

    try {

        let [idPropertyWithBraces, idPropertyName] = extractIdPropertyFromURL(options.itemURLSchema);

        let results: any[] = httpResponse.results;

        let newResults = results.map((result: any, index: number) => {

            const feedBackURLOptions: Omit<SearchFeedbackURLOptions, "token"> = {
                url: idPropertyName ? options?.itemURLSchema?.replace(idPropertyWithBraces, result[idPropertyName]) : '',
                itemId: result.id,
                itemOrder: index,
                query: options.query,
                userCountry: options.userCountry,
                userId: options.userId,
                userIp: options.userIp,
            }

            let feedbackUrl = this.urlBuilder.searchFeedbackURL(feedBackURLOptions);

            return ({
                ...result,
                feedbackUrl
            })
        });

        return Object.assign({}, httpResponse, {
            results: newResults
        });

    } catch (error) {
        return httpResponse;
    }
}