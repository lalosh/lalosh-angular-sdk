import { camelCaseToSnackCase, customIdentity } from "../helpers";
import { pickBy } from "../helpers/pick-by";
import { SearchURLOptions, URLBuilderExecutionContext } from "../types/url";
import { buildURLParams } from "./url.utils";



/**
 * Generate Search URL
 * 
 * @param {object} searchURLOptions 
 * @param {string} searchURLOptions.query - query used in search
 * @param {number} searchURLOptions.skip - skipped documents
 * @param {number} searchURLOptions.limit - max limit of returned documents
 * @param {string} searchURLOptions.sessionId - unique session id per user
 * @param {number} searchURLOptions.userId - unique user id
 * @param {string} searchURLOptions.userIp - user ip address
 * @param {string} searchURLOptions.userCountry - user country iso 3166 code
 * 
 * @return {string} - URL used for the Search Document request
 */
export function searchURL(

    this: URLBuilderExecutionContext,

    searchURLOptions: Partial<SearchURLOptions> = {}

) {

    /** check for properties */
    this.checkExistence({
        functionName: 'searchURL',
        properties: ["projectName", "collectionName", "searchToken", "searchHandler"]
    });

    /** destruct properties */
    const { baseURL, projectName, collectionName, searchHandler, searchToken } = this.options;
    const { query, ...restOptions } = searchURLOptions;

    /**
     * convert to snack case and remove undefined values
     */
    let urlParams = buildURLParams(
        pickBy(
            {
                ...camelCaseToSnackCase({ q: query, ...restOptions }),
                token: searchToken,
            },
            customIdentity)
    );

    urlParams = urlParams ? `?${urlParams}` : ``;


    return `${baseURL}/projects/${projectName}/collections/${collectionName}/search/${searchHandler}${urlParams}`;
}
