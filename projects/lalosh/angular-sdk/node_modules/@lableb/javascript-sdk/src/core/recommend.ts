import { RecommendFeedbackURLOptions, RecommendURLOptions } from "../types/url";
import { LablebSDKContext } from "./index";
import { extractIdPropertyFromURL } from "../helpers";
import { RecommendResponse } from "../types/sdk/recommend";




/**
 * Request Recommendation for some document from Lableb Cloud API
 * 
 * @param {object} options 
 * @param {number} options.id - input id of source document (source for recommend) (recommendation result will be based on it)
 * @param {string} options.title - source document title
 * @param {number} options.limit - limit number of documents returned in response
 * @param {number} options.skip - documents skipped in recommend query
 * @param {string} options.itemURLSchema - url schema help the user forming the feedback url for future use 
 * (you can provided any url string that has the string`{id}` in it so the feedback url is automatically formed for you to use when response gets back) * 
 * @param {string} options.sessionId - unique session id per user
 * @param {number} options.userId - unique user id
 * @param {string} options.userIp - user ip address
 * @param {string} options.userCountry - user country iso 3166 code
 */
export function recommend(

    this: LablebSDKContext,

    options: Omit<RecommendURLOptions, "sessionId">

): Promise<RecommendResponse> {

    const { itemURLSchema, ...urlOptions } = options;

    return this.httpClient
        .get({
            url: this.urlBuilder.recommendURL({
                ...urlOptions,
                sessionId: this.sessionId,
            }),
        })
        .then(appendFeedbackURL.bind(this, options));
}





/**
 * 
 * @param {object} httpResponse 
 * @param {object} options 
 */
function appendFeedbackURL(


    this: LablebSDKContext,

    options: Omit<RecommendURLOptions, "sessionId">,

    httpResponse: any,

): RecommendResponse {

    try {

        let [idPropertyWithBraces, idPropertyName] = extractIdPropertyFromURL(options.itemURLSchema);

        let results: any[] = httpResponse.results;

        let newResults = results.map((result: any, index: number) => {

            const feedBackURLOptions: Omit<RecommendFeedbackURLOptions, "token"> = {

                userCountry: options.userCountry,
                userId: options.userId,
                userIp: options.userIp,

                itemOrder: index,

                sourceId: options.id,
                sourceTitle: options.title,
                sourceUrl: idPropertyName ? options?.itemURLSchema?.replace(idPropertyWithBraces, String(options.id)) : '',

                targetId: result.id,
                targetTitle: result.title,
                targetUrl: idPropertyName ? options?.itemURLSchema?.replace(idPropertyWithBraces, result[idPropertyName]) : ''
            }

            let feedbackUrl = this.urlBuilder.recommendFeedbackURL(feedBackURLOptions);

            return ({
                ...result,
                feedbackUrl
            });
        });

        return Object.assign({}, httpResponse, {
            results: newResults
        });

    } catch (error) {
        return httpResponse;
    }

}