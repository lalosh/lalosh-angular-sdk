import { camelCaseToSnackCase, customIdentity } from "../helpers";
import { pickBy } from "../helpers/pick-by";
import { AutocompleteFeedbackURLOptions, URLBuilderExecutionContext } from "../types/url";
import { buildURLParams } from "./url.utils";






/**
 * Generate Autocomplete feed back URL
 * 
 * @param {AutocompleteFeedbackURL} autocompleteFeedbackOptions 
 * @param {string} autocompleteFeedbackOptions.query - query sent in autocomplete request
 * @param {number} autocompleteFeedbackOptions.itemId - chosen document id from autocomplete response
 * @param {number} autocompleteFeedbackOptions.itemOrder - chosen document order in autocomplete response 
 * @param {string} autocompleteFeedbackOptions.url - item/document url in host website
 * @param {string} autocompleteFeedbackOptions.sessionId - unique session id per user
 * @param {number} autocompleteFeedbackOptions.userId - unique user id
 * @param {string} autocompleteFeedbackOptions.userIp - user ip address
 * @param {string} autocompleteFeedbackOptions.userCountry - user country iso 3166 code
 * 
 * @returns {string} - URL used for the feedback request's url
 */
export function autocompleteFeedbackURL(

    this: URLBuilderExecutionContext,

    autocompleteFeedbackOptions: AutocompleteFeedbackURLOptions = { query: '' }

) {

    this.checkExistence({
        functionName: 'autocompleteFeedbackURL',
        properties: ["projectName", "collectionName", "autoCompleteHandler"]
    });

    const { baseURL, projectName, collectionName, autoCompleteHandler } = this.options;
    const { query, ...restOptions } = autocompleteFeedbackOptions;


    /**
    * convert to snack case and remove undefined values
    */
    let urlParams = buildURLParams(
        pickBy(
            camelCaseToSnackCase({
                q: query,
                ...restOptions,
                token: this.options.searchToken,
            }),
            customIdentity
        )
    );

    urlParams = urlParams ? `?${urlParams}` : ``;


    return `${baseURL}/projects/${projectName}/collections/${collectionName}/autocomplete/${autoCompleteHandler}/feedback/hits${urlParams}`;
}
