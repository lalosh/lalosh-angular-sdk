
const options = {
    SDK_OPTIONS_COLLECTION_NAME: '<COLLECTION_NAME>',
    SDK_OPTIONS_PROJECT_NAME: '<PROJECT_NAME>',
    SDK_OPTIONS_SEARCH_TOKEN: '<SEARCH_TOKEN>',
    SDK_OPTIONS_INDEX_TOKEN: '<INDEX_TOKEN>',
    SDK_OPTIONS_AUTO_COMPLETE_HANDLER: '<SEARCH_TOKEN>',
    SDK_OPTIONS_RECOMMEND_HANDLER: '<RECOMMEND_HANDLER>',
    SDK_OPTIONS_SEARCH_HANDLER: '<SEARCH_HANDLER>',
}

/**
 * initialize the sdk options and get a ready to request client
 */
const client = window.LablebSDK.init({
    collectionName: options.SDK_OPTIONS_COLLECTION_NAME || '',
    projectName: options.SDK_OPTIONS_PROJECT_NAME || '',
    autoCompleteHandler: options.SDK_OPTIONS_AUTO_COMPLETE_HANDLER || '',
    indexToken: options.SDK_OPTIONS_INDEX_TOKEN || '',
    recommendHandler: options.SDK_OPTIONS_RECOMMEND_HANDLER || '',
    searchHandler: options.SDK_OPTIONS_SEARCH_HANDLER || '',
    searchToken: options.SDK_OPTIONS_SEARCH_TOKEN || '',
});





async function searchExample() {

    let searchResponse = await client.search({
        query: document.getElementById('search-input').value, /** value taken from the search input */
        itemURLSchema: 'https://www.my-website.com/all-tasks/all-items/{id}'
    });

    console.log({ searchResponse })

    if (searchResponse.results && searchResponse.results.length) {

        /** access the result container */
        let searchResultsContainer = document.getElementById('search-results');

        
        /** for each item in results we render an `li` that display the content */
        searchResponse.results.forEach(result => {

            let searchResultItem = document.createElement('li');
            searchResultItem.innerText = result.title;

            /** we directly attach on Click event so feed back is sent whenever the item is clicked */
            searchResultItem.onclick = async function SubmitFeedback() {
                // 1- use sdk
                await client.searchFeedbackFromURL(result.feedbackUrl);
                // or 
                // 2- use your own http client
                // = await fetch(searchResponse.results[0].feedbackUrl).then(res => res.json());
            }

            /**
             * create recommendation button to request recommendation when user want to
             */
            let recommendButton = document.createElement('button');
            recommendButton.innerText = 'ask for recommendation';
            recommendButton.onclick = async function askForRecommendationForThisItem(event) {
                event.preventDefault();
                event.stopPropagation();

                let recommendResponse = await recommendDocument(result.id);
                console.log({recommendResponse});
                
                let recommendationContainer = document.createElement('div');
                recommendationContainer.setAttribute('class', 'example-div')
                let recommendList = document.createElement('ul');
                recommendationContainer.appendChild(recommendList);

                recommendResponse.results.forEach(recommendRes => {

                    let recommendItem = document.createElement('li');

                    recommendItem.innerText = recommendRes.title;
                    recommendItem.onclick = async function sendRecommendationFeedback(event) {
                        event.preventDefault();
                        event.stopPropagation();
                        await client.recommendFeedbackFromURL(recommendRes.feedbackUrl);
                    }

                    recommendList.appendChild(recommendItem);
                });

                this.parentElement.appendChild(recommendationContainer)
            }

            searchResultItem.appendChild(recommendButton);

            /** finlay add the item to parent container */
            searchResultsContainer.appendChild(searchResultItem);
        });

    }
}




async function autocompleteExample(event) {

    let autoCompleteResponse = await client.autocomplete({
        query: document.getElementById('autocomplete-input').value,
    });

    console.log('autocomplete Response: ', autoCompleteResponse);
    /** access the result container */
    let autocompleteResultsContainer = document.getElementById('autocomplete-results');

    autocompleteResultsContainer.innerHTML = "";



    if (autoCompleteResponse.results && autoCompleteResponse.results.length) {

        /** for each item in results we render an `li` that display the content */
        autoCompleteResponse.results.forEach(result => {

            let autocompleteResultItem = document.createElement('li');
            autocompleteResultItem.innerText = result.phrase;

            /** we directly attach on Click event so feed back is sent whenever the item is clicked */
            autocompleteResultItem.onclick = async function SubmitFeedback() {
                // 1- use sdk
                await client.autocompleteFeedbackFromURL(result.feedbackUrl);
                // or 
                // 2- use your own http client
                // await fetch(result.feedbackUrl);
            }

            /** finlay add the item to parent container */
            autocompleteResultsContainer.appendChild(autocompleteResultItem);
        });

    }
}





async function recommendDocument(id) {

    return await client.recommend({
        id,
    });

}





