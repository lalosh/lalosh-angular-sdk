import { HTTPParams } from "../types/http/params";
import { URLBuilderExecutionContext } from "../types/url";
import { URLBuilderOptions } from "../types/url/options";


/**
 * Take normal js object and convert it to url params using urlSearchParams 
 * 
 * @param {object} params key-value object that is converted to url params
 * @return {string} URL
 */
export function buildURLParams(params: HTTPParams = {}) {

    const paramsURLSearchParams = new URLSearchParams();

    Object.keys(params).forEach(key => {
        paramsURLSearchParams.append(key, String(params[key]));
    });

    return decodeURIComponent(paramsURLSearchParams.toString());
}






/**
 * check for a property within the options object, and throw error in case the property doesn't exist
 * 
 * @param {string} functionName
 * @param {string[]} properties
 */
export function checkExistence(
    this: URLBuilderExecutionContext,
    {
        functionName,
        properties,
    }: {
        functionName: string,
        properties: (keyof URLBuilderOptions)[]
    }) {


    properties.forEach(prop => {
        if (!this.options[prop])
            throw new Error(`No property: "${prop}" provided in URLBuilder@${functionName}`);
    });
}
