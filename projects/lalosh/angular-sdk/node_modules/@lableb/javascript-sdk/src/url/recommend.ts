import { customIdentity } from "../helpers";
import { camelCaseToSnackCase } from "../helpers/camel-case";
import { pickBy } from "../helpers/pick-by";
import { RecommendFeedbackURLOptions, RecommendURLOptions, URLBuilderExecutionContext } from "../types/url";
import { buildURLParams } from "./url.utils";



/**
 * Generate Recommend URL
 * 
 * @param {object} recommendURLOptions 
 * @param {number} recommendURLOptions.id - input id of source document (source for recommend) (recommendation result will be based on it)
 * @param {string} recommendURLOptions.title - source document title
 * @param {number} recommendURLOptions.limit - limit number of documents returned in response
 * @param {string} recommendURLOptions.itemURLSchema - url schema help the user forming the feedback url for future use 
 * (you can provided any url string that has the string`{id}` in it so the feedback url is automatically formed for you to use when response gets back) * 
 * @param {string} recommendURLOptions.sessionId - unique session id per user
 * @param {number} recommendURLOptions.userId - unique user id
 * @param {string} recommendURLOptions.userIp - user ip address
 * @param {string} recommendURLOptions.userCountry - user country iso 3166 code
 * 
 * @return {string} - URL used for the Recommend Document request
 */
export function recommendURL(

    this: URLBuilderExecutionContext,

    recommendURLOptions: Partial<RecommendURLOptions> = {}

) {

    /** check for properties existence */
    this.checkExistence({
        functionName: 'recommendURL',
        properties: ["projectName", "collectionName", "searchToken", "recommendHandler"]
    });

    /** destruct properties */
    const { baseURL, projectName, collectionName, searchToken, recommendHandler } = this.options;


    /**
     * convert to snack case and remove undefined values
     */
    let urlParams = buildURLParams(
        pickBy(
            {
                ...camelCaseToSnackCase(recommendURLOptions),
                token: searchToken,
            },
            customIdentity
        )
    );


    urlParams = urlParams ? `?${urlParams}` : ``;

    return `${baseURL}/projects/${projectName}/collections/${collectionName}/recommend/${recommendHandler}${urlParams}`;
}
